my_trait_space <- traits[, c("trait1", "trait2")]
uni_sample <- subset(uni$sp, uni$int == "2")
uni_sample <- uni_sample[!duplicated(uni_sample)] #removing duplicates
bias_sample <- subset(bias$sp, bias$int == "2")
bias_sample <- bias_sample[!duplicated(bias_sample)]
## Creating the group vector for dispRity
my_groups <- list(## All the species
"all_species" = subset(all$sp, all$int == "2"),
## All species in location 1
"area_0" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 0))],
## All species in location 2
"area_1" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 1))],
## The uniform sampled group
"uni_sample" = uni_sample,
## The biased sampled group
"bias_sample" = bias_sample)
## Creating a dispRity object that contains the trait space and the groups
my_groupings <- custom.subsets(data = my_trait_space,
group = my_groups)
#TG: ignore the warning (or read it to know what it just did ;) - but nothing bad happening here)
return(my_groupings)
}
tmp = simulate_one_set()
tmp
my_groupings = tmp
## Calculating disparity on these groups
disparity_sum_var <- dispRity(my_groupings, metric = c(sum, variances))
## Hop
plot(disparity_sum_var)
scatter_data <- cbind(my_trait_space, my_geography)
ggplot(my_trait_space, aes(x=trait1, y=trait2, color=my_geography)) + geom_point()
all
traits.bio
traits
traits$trait1
my_groupings
uni_sample
subset(all$sp, all$int == "2"),
subset(all$sp, all$int == "2")
sample(subset(all$sp, all$int == "2"), 1)
sample(subset(all$sp, all$int == "2"), 10)
sample(subset(all$sp, all$int == "2"), 20)
set.seed(180)
simulate_one_set <- function(){
### Step 1: Simulate tree
# current assumption: the trait value for each branch (i.e. each species) is the value at the end of the branch - decision made to maximise diffs between species
# current assumption: bifurcating speciation = each branch is a species
tr <- TreeSim::sim.bd.taxa(n = tips, 1, birth, death)[[1]]
plot(tr)
taxa <- FossilSim::sim.taxonomy(tr, beta = 1) # how you define morphotaxa with respect to the tree
### Step 2: Simulate "true" disparity
# generate new file for storing traits with taxa in it already [input]
# simulate trait_num number of traits and append to traits file [output]
traits <- taxa
for(i in 1:trait_num){
tmp <- FossilSim::sim.trait.values(init = 5, tree = tr, model = "BM", v = v, min.value = 0)
traits <- cbind(traits, tmp)
colnames(traits)[ncol(traits)] <- paste0("trait",i)
}
### Step 3: Simulate constant rate of preservation
fossils.uni.dupl <- FossilSim::sim.fossils.poisson(rate = rate, tree = tr)
plot(fossils.uni.dupl, tr, strata = bins, show.strata = TRUE)
#fossils.uni <- dplyr::distinct(fossils.uni.dupl, sp, .keep_all = TRUE)
#plot(fossils.uni, tr, strata = bins, show.strata = TRUE)
### Step 4: Simulate biogeography on tree
# assumption: approach assumes migration does not influence tree shape
# calculate threshold values for number of taxa in each geographic area
# loop to simulate biogeography as a binary character under the Mk model
# loop keeps track of number of attempts, exits if iteration.limit is reached
# inputs tree and migration rate
# outputs traits.bio, object of type double
#TO DO: integrate resetting iteration.count before 'if'
number_of_tips <- length(tmp)
L <- round(sum(threshold*number_of_tips))
H <- sum(number_of_tips-L)
while(fossils_in_area1 < L || fossils_in_area1 > H) {
if (iteration.count >= iteration.limit) {
stop("Failed to converge on a suitable geographical distribution")
}
## Running the biogeography simulation
traits.bio <- FossilSim::sim.trait.values(1, tree = tr, model = "Mk", v = rate.bio)
## Updating the number of fossils
fossils_in_area1 <- sum(traits.bio == '1')
iteration.count <- iteration.count + 1
}
### Step 5: Simulate biased sampling
# associate high and low sampling with biogeographical areas in traits.bio [input]
# simulate biased sampling on tree [input]
# output is fossils.bio = fossil taxa and respective ages when sampling is biased
rates <- translate.states(traits.bio, low, high)
fossils.bio.dupl <- FossilSim::sim.fossils.poisson(rates, tree = tr)
plot(fossils.bio.dupl, tr, strata = bins, show.strata = TRUE)
### Step 6: Bin fossils and match traits with species & bins
# assumption: no extant samples simulated or sampled, although some fossil species may be extant
# calculate bin max/min ages based on tree [input] and number of bins
#
max.age <- FossilSim::tree.max(tr)
int.ages <- seq(0, max.age, length = bins + 1)
###### run Joelle's function
boop <- bin.taxa(taxa, 3, max.age)
all.binned <- FossilSim::sim.interval.ages(boop, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for unbiased sampling set
fossils.binned <- FossilSim::sim.interval.ages(fossils.uni.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for biased sampling set
fossils.bio.binned <- FossilSim::sim.interval.ages(fossils.bio.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
bias <- int.assign(fossils.bio.binned, int.ages) ##
uni <- int.assign(fossils.binned, int.ages)
all <- int.assign(all.binned, int.ages)
#return(list(bias = bias, uni = uni, all = all,
#            traits = traits, traits.bio = traits.bio))
## Rename some variables
my_geography <- traits.bio
#my_geography <- data.frame(traits.bio, taxa$sp) ## change to adding bins not taxa numbers
my_trait_space <- traits[, c("trait1", "trait2")]
uni_sample <- subset(uni$sp, uni$int == "2")
uni_sample <- uni_sample[!duplicated(uni_sample)] #removing duplicates
bias_sample <- subset(bias$sp, bias$int == "2")
bias_sample <- bias_sample[!duplicated(bias_sample)]
## Creating the group vector for dispRity
my_groups <- list(## All the species
"all_species" = subset(all$sp, all$int == "2"),
## All species in location 1
"area_0" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 0))],
## All species in location 2
"area_1" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 1))],
## The uniform sampled group
"uni_sample" = uni_sample,
## The biased sampled group
"bias_sample" = bias_sample,
## unif species sampling
"uni_species" = sample(subset(all$sp, all$int == "2"), 20)
)
## Creating a dispRity object that contains the trait space and the groups
my_groupings <- custom.subsets(data = my_trait_space,
group = my_groups)
#TG: ignore the warning (or read it to know what it just did ;) - but nothing bad happening here)
return(my_groupings)
}
tmp = simulate_one_set()
my_groupings = tmp
## Calculating disparity on these groups
disparity_sum_var <- dispRity(my_groupings, metric = c(sum, variances))
## Hop
plot(disparity_sum_var)
set.seed(185)
simulate_one_set <- function(){
### Step 1: Simulate tree
# current assumption: the trait value for each branch (i.e. each species) is the value at the end of the branch - decision made to maximise diffs between species
# current assumption: bifurcating speciation = each branch is a species
tr <- TreeSim::sim.bd.taxa(n = tips, 1, birth, death)[[1]]
plot(tr)
taxa <- FossilSim::sim.taxonomy(tr, beta = 1) # how you define morphotaxa with respect to the tree
### Step 2: Simulate "true" disparity
# generate new file for storing traits with taxa in it already [input]
# simulate trait_num number of traits and append to traits file [output]
traits <- taxa
for(i in 1:trait_num){
tmp <- FossilSim::sim.trait.values(init = 5, tree = tr, model = "BM", v = v, min.value = 0)
traits <- cbind(traits, tmp)
colnames(traits)[ncol(traits)] <- paste0("trait",i)
}
### Step 3: Simulate constant rate of preservation
fossils.uni.dupl <- FossilSim::sim.fossils.poisson(rate = rate, tree = tr)
plot(fossils.uni.dupl, tr, strata = bins, show.strata = TRUE)
#fossils.uni <- dplyr::distinct(fossils.uni.dupl, sp, .keep_all = TRUE)
#plot(fossils.uni, tr, strata = bins, show.strata = TRUE)
### Step 4: Simulate biogeography on tree
# assumption: approach assumes migration does not influence tree shape
# calculate threshold values for number of taxa in each geographic area
# loop to simulate biogeography as a binary character under the Mk model
# loop keeps track of number of attempts, exits if iteration.limit is reached
# inputs tree and migration rate
# outputs traits.bio, object of type double
#TO DO: integrate resetting iteration.count before 'if'
number_of_tips <- length(tmp)
L <- round(sum(threshold*number_of_tips))
H <- sum(number_of_tips-L)
while(fossils_in_area1 < L || fossils_in_area1 > H) {
if (iteration.count >= iteration.limit) {
stop("Failed to converge on a suitable geographical distribution")
}
## Running the biogeography simulation
traits.bio <- FossilSim::sim.trait.values(1, tree = tr, model = "Mk", v = rate.bio)
## Updating the number of fossils
fossils_in_area1 <- sum(traits.bio == '1')
iteration.count <- iteration.count + 1
}
### Step 5: Simulate biased sampling
# associate high and low sampling with biogeographical areas in traits.bio [input]
# simulate biased sampling on tree [input]
# output is fossils.bio = fossil taxa and respective ages when sampling is biased
rates <- translate.states(traits.bio, low, high)
fossils.bio.dupl <- FossilSim::sim.fossils.poisson(rates, tree = tr)
plot(fossils.bio.dupl, tr, strata = bins, show.strata = TRUE)
### Step 6: Bin fossils and match traits with species & bins
# assumption: no extant samples simulated or sampled, although some fossil species may be extant
# calculate bin max/min ages based on tree [input] and number of bins
#
max.age <- FossilSim::tree.max(tr)
int.ages <- seq(0, max.age, length = bins + 1)
###### run Joelle's function
boop <- bin.taxa(taxa, 3, max.age)
all.binned <- FossilSim::sim.interval.ages(boop, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for unbiased sampling set
fossils.binned <- FossilSim::sim.interval.ages(fossils.uni.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for biased sampling set
fossils.bio.binned <- FossilSim::sim.interval.ages(fossils.bio.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
bias <- int.assign(fossils.bio.binned, int.ages) ##
uni <- int.assign(fossils.binned, int.ages)
all <- int.assign(all.binned, int.ages)
#return(list(bias = bias, uni = uni, all = all,
#            traits = traits, traits.bio = traits.bio))
## Rename some variables
my_geography <- traits.bio
#my_geography <- data.frame(traits.bio, taxa$sp) ## change to adding bins not taxa numbers
my_trait_space <- traits[, c("trait1", "trait2")]
uni_sample <- subset(uni$sp, uni$int == "2")
uni_sample <- uni_sample[!duplicated(uni_sample)] #removing duplicates
bias_sample <- subset(bias$sp, bias$int == "2")
bias_sample <- bias_sample[!duplicated(bias_sample)]
## Creating the group vector for dispRity
my_groups <- list(## All the species
"all_species" = subset(all$sp, all$int == "2"),
## All species in location 1
"area_0" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 0))],
## All species in location 2
"area_1" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 1))],
## The uniform sampled group
"uni_sample" = uni_sample,
## The biased sampled group
"bias_sample" = bias_sample,
## unif species sampling
"uni_species" = sample(subset(all$sp, all$int == "2"), 20)
)
## Creating a dispRity object that contains the trait space and the groups
my_groupings <- custom.subsets(data = my_trait_space,
group = my_groups)
#TG: ignore the warning (or read it to know what it just did ;) - but nothing bad happening here)
return(my_groupings)
}
tmp = simulate_one_set()
my_groupings = tmp
## Calculating disparity on these groups
disparity_sum_var <- dispRity(my_groupings, metric = c(sum, variances))
set.seed(1857)
tmp = simulate_one_set()
my_groupings = tmp
## Calculating disparity on these groups
disparity_sum_var <- dispRity(my_groupings, metric = c(sum, variances))
## Hop
plot(disparity_sum_var)
my_groupings$subsets
set.seed(1857)
tr <- TreeSim::sim.bd.taxa(n = tips, 1, birth, death)[[1]]
plot(tr)
taxa <- FossilSim::sim.taxonomy(tr, beta = 1) # how you define morphotaxa with respect to the tree
### Step 2: Simulate "true" disparity
# generate new file for storing traits with taxa in it already [input]
# simulate trait_num number of traits and append to traits file [output]
traits <- taxa
for(i in 1:trait_num){
tmp <- FossilSim::sim.trait.values(init = 5, tree = tr, model = "BM", v = v, min.value = 0)
traits <- cbind(traits, tmp)
colnames(traits)[ncol(traits)] <- paste0("trait",i)
}
### Step 3: Simulate constant rate of preservation
fossils.uni.dupl <- FossilSim::sim.fossils.poisson(rate = rate, tree = tr)
plot(fossils.uni.dupl, tr, strata = bins, show.strata = TRUE)
#fossils.uni <- dplyr::distinct(fossils.uni.dupl, sp, .keep_all = TRUE)
#plot(fossils.uni, tr, strata = bins, show.strata = TRUE)
### Step 4: Simulate biogeography on tree
# assumption: approach assumes migration does not influence tree shape
# calculate threshold values for number of taxa in each geographic area
# loop to simulate biogeography as a binary character under the Mk model
# loop keeps track of number of attempts, exits if iteration.limit is reached
# inputs tree and migration rate
# outputs traits.bio, object of type double
#TO DO: integrate resetting iteration.count before 'if'
number_of_tips <- length(tmp)
L <- round(sum(threshold*number_of_tips))
H <- sum(number_of_tips-L)
while(fossils_in_area1 < L || fossils_in_area1 > H) {
if (iteration.count >= iteration.limit) {
stop("Failed to converge on a suitable geographical distribution")
}
## Running the biogeography simulation
traits.bio <- FossilSim::sim.trait.values(1, tree = tr, model = "Mk", v = rate.bio)
## Updating the number of fossils
fossils_in_area1 <- sum(traits.bio == '1')
iteration.count <- iteration.count + 1
}
### Step 5: Simulate biased sampling
# associate high and low sampling with biogeographical areas in traits.bio [input]
# simulate biased sampling on tree [input]
# output is fossils.bio = fossil taxa and respective ages when sampling is biased
rates <- translate.states(traits.bio, low, high)
fossils.bio.dupl <- FossilSim::sim.fossils.poisson(rates, tree = tr)
plot(fossils.bio.dupl, tr, strata = bins, show.strata = TRUE)
### Step 6: Bin fossils and match traits with species & bins
# assumption: no extant samples simulated or sampled, although some fossil species may be extant
# calculate bin max/min ages based on tree [input] and number of bins
#
max.age <- FossilSim::tree.max(tr)
int.ages <- seq(0, max.age, length = bins + 1)
###### run Joelle's function
boop <- bin.taxa(taxa, 3, max.age)
all.binned <- FossilSim::sim.interval.ages(boop, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for unbiased sampling set
fossils.binned <- FossilSim::sim.interval.ages(fossils.uni.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for biased sampling set
fossils.bio.binned <- FossilSim::sim.interval.ages(fossils.bio.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
bias <- int.assign(fossils.bio.binned, int.ages) ##
uni <- int.assign(fossils.binned, int.ages)
all <- int.assign(all.binned, int.ages)
#return(list(bias = bias, uni = uni, all = all,
#            traits = traits, traits.bio = traits.bio))
## Rename some variables
my_geography <- traits.bio
#my_geography <- data.frame(traits.bio, taxa$sp) ## change to adding bins not taxa numbers
my_trait_space <- traits[, c("trait1", "trait2")]
uni_sample <- subset(uni$sp, uni$int == "2")
uni_sample <- uni_sample[!duplicated(uni_sample)] #removing duplicates
bias_sample <- subset(bias$sp, bias$int == "2")
bias_sample <- bias_sample[!duplicated(bias_sample)]
length(uni_sample)
length(bias_sample)
set.seed(1857)
birth <- 0.1 #birth rate
death <- 0.07 # death rate
tips <- 100 # number of tips in tree
# Traits
trait_num <- 2 # number of traits we are simulating
v <- 0.005 # rate of trait evolution
# Uniform Sampling
rate <- 0.2 # rate of fossilisation
# Biogeography simulation
rate.bio = 0.005 # migration rate
fossils_in_area1 <- 0 # setting up parameter for checking spatial split
threshold <- 0.45 # threshold for spatial split between areas 0 and 1
iteration.limit <- 100 #number of times loop for generating biogeographic areas can loop
iteration.count <- 0 #always set at 0 to start with, aka resetting it
# Biased sampling
low = 0.0015 # sampling rate for fossils in low sampling area
high = 0.5 # sampling rate for fossils in high sampling area
# Time binning
bins <- 3 # number of time bins
### Step 1: Simulate tree
# current assumption: the trait value for each branch (i.e. each species) is the value at the end of the branch - decision made to maximise diffs between species
# current assumption: bifurcating speciation = each branch is a species
tr <- TreeSim::sim.bd.taxa(n = tips, 1, birth, death)[[1]]
plot(tr)
taxa <- FossilSim::sim.taxonomy(tr, beta = 1) # how you define morphotaxa with respect to the tree
### Step 2: Simulate "true" disparity
# generate new file for storing traits with taxa in it already [input]
# simulate trait_num number of traits and append to traits file [output]
traits <- taxa
for(i in 1:trait_num){
tmp <- FossilSim::sim.trait.values(init = 5, tree = tr, model = "BM", v = v, min.value = 0)
traits <- cbind(traits, tmp)
colnames(traits)[ncol(traits)] <- paste0("trait",i)
}
### Step 3: Simulate constant rate of preservation
fossils.uni.dupl <- FossilSim::sim.fossils.poisson(rate = rate, tree = tr)
plot(fossils.uni.dupl, tr, strata = bins, show.strata = TRUE)
#fossils.uni <- dplyr::distinct(fossils.uni.dupl, sp, .keep_all = TRUE)
#plot(fossils.uni, tr, strata = bins, show.strata = TRUE)
### Step 4: Simulate biogeography on tree
# assumption: approach assumes migration does not influence tree shape
# calculate threshold values for number of taxa in each geographic area
# loop to simulate biogeography as a binary character under the Mk model
# loop keeps track of number of attempts, exits if iteration.limit is reached
# inputs tree and migration rate
# outputs traits.bio, object of type double
#TO DO: integrate resetting iteration.count before 'if'
number_of_tips <- length(tmp)
L <- round(sum(threshold*number_of_tips))
H <- sum(number_of_tips-L)
while(fossils_in_area1 < L || fossils_in_area1 > H) {
if (iteration.count >= iteration.limit) {
stop("Failed to converge on a suitable geographical distribution")
}
## Running the biogeography simulation
traits.bio <- FossilSim::sim.trait.values(1, tree = tr, model = "Mk", v = rate.bio)
## Updating the number of fossils
fossils_in_area1 <- sum(traits.bio == '1')
iteration.count <- iteration.count + 1
}
### Step 5: Simulate biased sampling
# associate high and low sampling with biogeographical areas in traits.bio [input]
# simulate biased sampling on tree [input]
# output is fossils.bio = fossil taxa and respective ages when sampling is biased
rates <- translate.states(traits.bio, low, high)
fossils.bio.dupl <- FossilSim::sim.fossils.poisson(rates, tree = tr)
plot(fossils.bio.dupl, tr, strata = bins, show.strata = TRUE)
### Step 6: Bin fossils and match traits with species & bins
# assumption: no extant samples simulated or sampled, although some fossil species may be extant
# calculate bin max/min ages based on tree [input] and number of bins
#
max.age <- FossilSim::tree.max(tr)
int.ages <- seq(0, max.age, length = bins + 1)
###### run Joelle's function
boop <- bin.taxa(taxa, 3, max.age)
all.binned <- FossilSim::sim.interval.ages(boop, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for unbiased sampling set
fossils.binned <- FossilSim::sim.interval.ages(fossils.uni.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
# bin fossils for biased sampling set
fossils.bio.binned <- FossilSim::sim.interval.ages(fossils.bio.dupl, tr, max.age = max.age, strata = bins, use.species.ages = FALSE)
bias <- int.assign(fossils.bio.binned, int.ages) ##
uni <- int.assign(fossils.binned, int.ages)
all <- int.assign(all.binned, int.ages)
#return(list(bias = bias, uni = uni, all = all,
#            traits = traits, traits.bio = traits.bio))
## Rename some variables
my_geography <- traits.bio
#my_geography <- data.frame(traits.bio, taxa$sp) ## change to adding bins not taxa numbers
my_trait_space <- traits[, c("trait1", "trait2")]
uni_sample <- subset(uni$sp, uni$int == "2")
uni_sample <- uni_sample[!duplicated(uni_sample)] #removing duplicates
bias_sample <- subset(bias$sp, bias$int == "2")
bias_sample <- bias_sample[!duplicated(bias_sample)]
## Creating the group vector for dispRity
my_groups <- list(## All the species
"all_species" = subset(all$sp, all$int == "2"),
## All species in location 1
"area_0" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 0))],
## All species in location 2
"area_1" = subset(all$sp, all$int == "2")[(subset(all$sp, all$int == "2") %in% which(my_geography == 1))],
## The uniform sampled group
"uni_sample" = uni_sample,
## The biased sampled group
"bias_sample" = bias_sample,
## unif species sampling
"uni_species" = sample(subset(all$sp, all$int == "2"), 20)
)
## Creating a dispRity object that contains the trait space and the groups
my_groupings <- custom.subsets(data = my_trait_space,
group = my_groups)
#TG: ignore the warning (or read it to know what it just did ;) - but nothing bad happening here)
set.seed(1857)
### Setting up variables
# Trees
birth <- 0.1 #birth rate
death <- 0.05 # death rate
tips <- 300 # number of tips in tree
# Traits
trait_num <- 2 # number of traits we are simulating
v <- 0.005 # rate of trait evolution
# Uniform Sampling
rate <- 0.2 # rate of fossilisation
# Biogeography simulation
rate.bio = 0.005 # migration rate
fossils_in_area1 <- 0 # setting up parameter for checking spatial split
threshold <- 0.45 # threshold for spatial split between areas 0 and 1
iteration.limit <- 100 #number of times loop for generating biogeographic areas can loop
iteration.count <- 0 #always set at 0 to start with, aka resetting it
# Biased sampling
low = 0.0015 # sampling rate for fossils in low sampling area
high = 0.5 # sampling rate for fossils in high sampling area
# Time binning
bins <- 3 # number of time bins
tmp = simulate_one_set()
my_groupings = tmp
disparity_sum_var <- dispRity(my_groupings, metric = c(sum, variances))
## Hop
plot(disparity_sum_var)
View(tmp)
source("functions_DisaBiss.R")
set.seed(17)
# Trees
birth <- 0.1 #birth rate
death <- 0.05 # death rate
tips <- 300 # number of tips in tree
# Traits
trait_num <- 2 # number of traits we are simulating
v <- 0.005 # rate of trait evolution
# Uniform Sampling
rate <- 0.2 # rate of fossilisation
# Biogeography simulation
rate.bio = 0.005 # migration rate
fossils_in_area1 <- 0 # setting up parameter for checking spatial split
threshold <- 0.45 # threshold for spatial split between areas 0 and 1
iteration.limit <- 100 #number of times loop for generating biogeographic areas can loop
iteration.count <- 0 #always set at 0 to start with, aka resetting it
# Biased sampling
low = 0.0015 # sampling rate for fossils in low sampling area
high = 0.5 # sampling rate for fossils in high sampling area
# Time binning
bins <- 3 # number of time bins
tr <- TreeSim::sim.bd.taxa(n = tips, 1, birth, death)[[1]]
plot(tr)
taxa <- FossilSim::sim.taxonomy(tr, beta = 1) # how you define morphotaxa with respect to the tree
tmp2 <- generate.traits(taxa)
View(tmp2)
View(taxa)
tmp2 <- generate.traits(taxa, trait_num, tr, v)
source("functions_DisaBiss.R")
tmp2 <- generate.traits(taxa, trait_num, tr, v)
View(tmp2)
extract.dispRity(disparity_sum_var)
extract.dispRity(my_trait_space, my_groups)
extract.dispRity(my_groupings)
my_groupings <- custom.subsets(data = my_trait_space,
group = my_groups)
my_groupings <- custom.subsets(data = my_trait_space,
group = my_groups)
extract.dispRity(my_trait_space, my_groups)
extract.dispRity(my_groupings)
disparity_sum_var <- dispRity(my_groupings, metric = c(sum, variances))
extract.dispRity(disparity_sum_var)
scatter_data <- cbind(my_trait_space, my_geography)
ggplot(my_trait_space, aes(x=trait1, y=trait2, color=my_geography)) + geom_point()
View(my_trait_space)
